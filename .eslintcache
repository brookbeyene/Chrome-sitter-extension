[{"/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/index.js":"1","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/reportWebVitals.js":"2","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/App.js":"3","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/utilities.js":"4","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/Component/HomePage.js":"5"},{"size":500,"mtime":1612911728315,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1612911728316,"results":"8","hashOfConfig":"7"},{"size":4440,"mtime":1613512798558,"results":"9","hashOfConfig":"7"},{"size":6837,"mtime":1612911728320,"results":"10","hashOfConfig":"7"},{"size":3088,"mtime":1613513353063,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lx7bnr",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/index.js",[],["26","27"],"/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/reportWebVitals.js",[],"/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/App.js",["28","29","30","31","32"],"import logo from './logo.svg';\nimport './App.css';\nimport ReactDOM from 'react-dom';\nimport React, {useRef} from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as posenet from \"@tensorflow-models/posenet\";\nimport Webcam from \"react-webcam\";\nimport { drawKeypoints, drawSkeleton } from \"./utilities\";\nimport  Album  from \"./Component/HomePage\";\nconst bodyPose = null;\nfunction App() {\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  \n\n  // load posenet\n  const runPosenet = async () =>{\n    const net = await posenet.load({\n      inputResolution:{width: 380, height:240},\n      scale:0.52\n    })\n    // setInterval\n   \n    \n    setInterval(()=>{\n        detect(net)\n  \n    }, 2000)\n    \n    \n  }\n\n  //start detecting \n  const detect = async(net) =>{\n    if(typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState ===4) {\n      \n      // get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n\n      // set video with\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n\n      // make the detection\n      const pose = await net.estimateSinglePose(video);\n      // bodyPose = pose[\"keypoints\"][5][\"position\"][\"x\"] - pose[\"keypoints\"][6][\"position\"][\"x\"]\n      drawCanvas(pose, video, videoWidth, videoHeight, canvasRef)\n      \n      // const yFrame = pose[\"keypoints\"][2][\"position\"][\"y\"] + pose[\"keypoints\"][6][\"position\"][\"y\"]\n\n      // const xCounter = 4\n      // // const xAvg = 0\n      const xFrame = pose[\"keypoints\"][6][\"position\"][\"x\"] - pose[\"keypoints\"][5][\"position\"][\"x\"]\n      ReactDOM.render(<div style ={{\n            \n            \n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: \"0\",\n        right: \"0\",\n        textAlign: \"center\",\n        zIndex:9,\n        width: 380,\n        height: 240\n      }} > <h1>Good Job </h1>\n      <h2>You are sitting properly...keeeeeep it up!! </h2>\n      <h2>Normal Pose Avg Score  = 17</h2>\n      \n      <Webcam \n          ref = {webcamRef}\n          style = {{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: \"0\",\n            right: \"0\",\n            textAlign: \"center\",\n            zIndex:9,\n            width: 380,\n            height: 240\n            \n          }}\n        />\n        <canvas \n        ref = {canvasRef}\n        style ={{\n                  \n                  position: \"absolute\",\n                  marginLeft: \"auto\",\n                  marginRight: \"auto\",\n                  left: \"0\",\n                  right: \"0\",\n                  textAlign: \"center\",\n                  zIndex:9,\n                  width: 380,\n                  height: 240\n            }} /><h1></h1>\n  \n      <h2>Your Pose Avg Score = {Math.round(xFrame)}</h2>\n    \n      <Album />\n      <button><a href=\"https://google.com\" class=\"button\">Go to Google</a></button><h1></h1>\n      </div>, document.getElementById('bodyPosing'))\n    }\n  }\n  \n\n  const drawCanvas = (pose, video, videoWidth, videoHeight, canvas) => {\n    const ctx = canvas.current.getContext(\"2d\");\n    canvas.current.width = videoWidth;\n    canvas.current.height = videoHeight;\n\n    drawKeypoints(pose[\"keypoints\"], 0.6, ctx);\n    drawSkeleton(pose[\"keypoints\"], 0.7, ctx);\n\n  };\n  \n  runPosenet()\n  // function myStopFunction(){\n  //   clearInterval(runPosenet())\n  // }\n  // myStopFunction()\n  // setInterval(runPosenet(), 10000)\n  return (\n    <div className=\"App\" id=\"bodyPosing\" >\n      <header className=\"App-header\" id=\"searchBar\">\n    <> \n      <Webcam \n        ref = {webcamRef}\n        style = {{\n          position: \"absolute\",\n          marginRight: \"auto\",\n          marginLeft: \"auto\",\n         \n          left: \"0\",\n          right: \"0\",\n          textAlign: \"center\",\n          zIndex:9,\n          width: 380,\n          height: 240\n          \n        }}\n      />\n      <canvas \n      ref = {canvasRef}\n      style ={{\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: \"0\",\n        right: \"0\",\n        textAlign: \"center\",\n        zIndex:9,\n        width: 380, height:240\n      }} \n      />\n      \n      </>\n      \n     \n      </header>\n      </div>\n  );\n}\n\nexport default App;\n","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/utilities.js",["33"],"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as posenet from '@tensorflow-models/posenet';\nimport * as tf from '@tensorflow/tfjs';\n\nconst color = 'aqua';\nconst boundingBoxColor = 'red';\nconst lineWidth = 2;\n\nexport const tryResNetButtonName = 'tryResNetButton';\nexport const tryResNetButtonText = '[New] Try ResNet50';\nconst tryResNetButtonTextCss = 'width:100%;text-decoration:underline;';\nconst tryResNetButtonBackgroundCss = 'background:#e61d5f;';\n\nfunction isAndroid() {\n  return /Android/i.test(navigator.userAgent);\n}\n\nfunction isiOS() {\n  return /iPhone|iPad|iPod/i.test(navigator.userAgent);\n}\n\nexport function isMobile() {\n  return isAndroid() || isiOS();\n}\n\nfunction setDatGuiPropertyCss(propertyText, liCssString, spanCssString = '') {\n  var spans = document.getElementsByClassName('property-name');\n  for (var i = 0; i < spans.length; i++) {\n    var text = spans[i].textContent || spans[i].innerText;\n    if (text == propertyText) {\n      spans[i].parentNode.parentNode.style = liCssString;\n      if (spanCssString !== '') {\n        spans[i].style = spanCssString;\n      }\n    }\n  }\n}\n\nexport function updateTryResNetButtonDatGuiCss() {\n  setDatGuiPropertyCss(\n      tryResNetButtonText, tryResNetButtonBackgroundCss,\n      tryResNetButtonTextCss);\n}\n\n/**\n * Toggles between the loading UI and the main canvas UI.\n */\nexport function toggleLoadingUI(\n    showLoadingUI, loadingDivId = 'loading', mainDivId = 'main') {\n  if (showLoadingUI) {\n    document.getElementById(loadingDivId).style.display = 'block';\n    document.getElementById(mainDivId).style.display = 'none';\n  } else {\n    document.getElementById(loadingDivId).style.display = 'none';\n    document.getElementById(mainDivId).style.display = 'block';\n  }\n}\n\nfunction toTuple({y, x}) {\n  return [y, x];\n}\n\nexport function drawPoint(ctx, y, x, r, color) {\n  ctx.beginPath();\n  ctx.arc(x, y, r, 0, 2 * Math.PI);\n  ctx.fillStyle = color;\n  ctx.fill();\n}\n\n/**\n * Draws a line on a canvas, i.e. a joint\n */\nexport function drawSegment([ay, ax], [by, bx], color, scale, ctx) {\n  ctx.beginPath();\n  ctx.moveTo(ax * scale, ay * scale);\n  ctx.lineTo(bx * scale, by * scale);\n  ctx.lineWidth = lineWidth;\n  ctx.strokeStyle = color;\n  ctx.stroke();\n}\n\n/**\n * Draws a pose skeleton by looking up all adjacent keypoints/joints\n */\nexport function drawSkeleton(keypoints, minConfidence, ctx, scale = 1) {\n  const adjacentKeyPoints =\n      posenet.getAdjacentKeyPoints(keypoints, minConfidence);\n\n  adjacentKeyPoints.forEach((keypoints) => {\n    drawSegment(\n        toTuple(keypoints[0].position), toTuple(keypoints[1].position), color,\n        scale, ctx);\n  });\n}\n\n/**\n * Draw pose keypoints onto a canvas\n */\nexport function drawKeypoints(keypoints, minConfidence, ctx, scale = 1) {\n  for (let i = 0; i < keypoints.length; i++) {\n    const keypoint = keypoints[i];\n\n    if (keypoint.score < minConfidence) {\n      continue;\n    }\n\n    const {y, x} = keypoint.position;\n    drawPoint(ctx, y * scale, x * scale, 3, color);\n  }\n}\n\n/**\n * Draw the bounding box of a pose. For example, for a whole person standing\n * in an image, the bounding box will begin at the nose and extend to one of\n * ankles\n */\nexport function drawBoundingBox(keypoints, ctx) {\n  const boundingBox = posenet.getBoundingBox(keypoints);\n\n  ctx.rect(\n      boundingBox.minX, boundingBox.minY, boundingBox.maxX - boundingBox.minX,\n      boundingBox.maxY - boundingBox.minY);\n\n  ctx.strokeStyle = boundingBoxColor;\n  ctx.stroke();\n}\n\n/**\n * Converts an arary of pixel data into an ImageData object\n */\nexport async function renderToCanvas(a, ctx) {\n  const [height, width] = a.shape;\n  const imageData = new ImageData(width, height);\n\n  const data = await a.data();\n\n  for (let i = 0; i < height * width; ++i) {\n    const j = i * 4;\n    const k = i * 3;\n\n    imageData.data[j + 0] = data[k + 0];\n    imageData.data[j + 1] = data[k + 1];\n    imageData.data[j + 2] = data[k + 2];\n    imageData.data[j + 3] = 255;\n  }\n\n  ctx.putImageData(imageData, 0, 0);\n}\n\n/**\n * Draw an image on a canvas\n */\nexport function renderImageToCanvas(image, size, canvas) {\n  canvas.width = size[0];\n  canvas.height = size[1];\n  const ctx = canvas.getContext('2d');\n\n  ctx.drawImage(image, 0, 0);\n}\n\n/**\n * Draw heatmap values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's heatmap outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\nexport function drawHeatMapValues(heatMapValues, outputStride, canvas) {\n  const ctx = canvas.getContext('2d');\n  const radius = 5;\n  const scaledValues = heatMapValues.mul(tf.scalar(outputStride, 'int32'));\n\n  drawPoints(ctx, scaledValues, radius, color);\n}\n\n/**\n * Used by the drawHeatMapValues method to draw heatmap points on to\n * the canvas\n */\nfunction drawPoints(ctx, points, radius, color) {\n  const data = points.buffer().values;\n\n  for (let i = 0; i < data.length; i += 2) {\n    const pointY = data[i];\n    const pointX = data[i + 1];\n\n    if (pointX !== 0 && pointY !== 0) {\n      ctx.beginPath();\n      ctx.arc(pointX, pointY, radius, 0, 2 * Math.PI);\n      ctx.fillStyle = color;\n      ctx.fill();\n    }\n  }\n}\n\n/**\n * Draw offset vector values, one of the model outputs, on to the canvas\n * Read our blog post for a description of PoseNet's offset vector outputs\n * https://medium.com/tensorflow/real-time-human-pose-estimation-in-the-browser-with-tensorflow-js-7dd0bc881cd5\n */\n// export function drawOffsetVectors(\n//     heatMapValues, offsets, outputStride, scale = 1, ctx) {\n//   const offsetPoints =\n//       posenet.singlePose.getOffsetPoints(heatMapValues, outputStride, offsets);\n\n//   const heatmapData = heatMapValues.buffer().values;\n//   const offsetPointsData = offsetPoints.buffer().values;\n\n//   for (let i = 0; i < heatmapData.length; i += 2) {\n//     const heatmapY = heatmapData[i] * outputStride;\n//     const heatmapX = heatmapData[i + 1] * outputStride;\n//     const offsetPointY = offsetPointsData[i];\n//     const offsetPointX = offsetPointsData[i + 1];\n\n//     drawSegment(\n//         [heatmapY, heatmapX], [offsetPointY, offsetPointX], color, scale, ctx);\n//   }\n// }","/Users/Brook/Flatiron/extenstion/Chrome-sitter-extension/src/Component/HomePage.js",["34","35","36","37","38","39","40","41","42"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport CameraIcon from '@material-ui/icons/PhotoCamera';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst cards = [1, 2, 3];\n\nexport default function Album(props) {\n  const classes = useStyles();\n  console.log(props)\n\n  return (\n    <React.Fragment>\n      \n      \n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            \n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    Go To Google\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    Log out \n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          \n          \n          \n        </Container>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Chrome-Sitter\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          \"Keep it up...get it?!\"\n        </Typography>\n        <Copyright />\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"51","line":5,"column":13,"nodeType":"49","messageId":"50","endLine":5,"endColumn":15},{"ruleId":"47","severity":1,"message":"52","line":10,"column":7,"nodeType":"49","messageId":"50","endLine":10,"endColumn":15},{"ruleId":"53","severity":1,"message":"54","line":102,"column":18,"nodeType":"55","endLine":102,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":107,"column":84,"nodeType":"55","endLine":107,"endColumn":88},{"ruleId":"56","severity":1,"message":"57","line":45,"column":14,"nodeType":"58","messageId":"59","endLine":45,"endColumn":16},{"ruleId":"47","severity":1,"message":"60","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"47","severity":1,"message":"61","line":4,"column":8,"nodeType":"49","messageId":"50","endLine":4,"endColumn":18},{"ruleId":"47","severity":1,"message":"62","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":12},{"ruleId":"47","severity":1,"message":"63","line":6,"column":8,"nodeType":"49","messageId":"50","endLine":6,"endColumn":19},{"ruleId":"47","severity":1,"message":"64","line":7,"column":8,"nodeType":"49","messageId":"50","endLine":7,"endColumn":19},{"ruleId":"47","severity":1,"message":"65","line":8,"column":8,"nodeType":"49","messageId":"50","endLine":8,"endColumn":17},{"ruleId":"47","severity":1,"message":"66","line":9,"column":8,"nodeType":"49","messageId":"50","endLine":9,"endColumn":19},{"ruleId":"47","severity":1,"message":"67","line":11,"column":8,"nodeType":"49","messageId":"50","endLine":11,"endColumn":15},{"ruleId":"47","severity":1,"message":"68","line":63,"column":7,"nodeType":"49","messageId":"50","endLine":63,"endColumn":12},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'tf' is defined but never used.","'bodyPose' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'AppBar' is defined but never used.","'CameraIcon' is defined but never used.","'Card' is defined but never used.","'CardActions' is defined but never used.","'CardContent' is defined but never used.","'CardMedia' is defined but never used.","'CssBaseline' is defined but never used.","'Toolbar' is defined but never used.","'cards' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]